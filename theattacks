# we define attacks for each pokemon. the inputs "breakup" are there to slow game down. 

import pokemon as poke
from random import randint

#charizard's attacks

def slash(opp_string): 
    opp=eval("poke."+opp_string)
    print("{} used Slash!".format(poke.charizard.name))
    n=randint(1,10)
    if n<=8+poke.charizard.acc:
        opp.hp=max(0,opp.hp-20)
        if opp.hp>0:
            print("A hit! {} has {}HP remaing".format(opp.name, opp.hp ))
            breakup=input()             # to control pace of game
        else:
            print("A hit! {0} has {1}HP remaing\n{0} fainted, {2} wins!".format(opp.name, opp.hp, poke.charizard.name))
    else:
        print("Slash missed! {} still has {}HP".format(opp.name, opp.hp ))
        breakup=input()

     
def fire_blast(opp_string): 
    opp=eval("poke."+opp_string)
    print("{} used fire blast!".format(poke.charizard.name))
    n=randint(1,10)
    if n<=4+poke.charizard.acc:
        opp.hp=max(0,opp.hp-45)
        if opp.hp>0:
            print("A hit! {} has {}HP remaing".format(opp.name, opp.hp ))
            breakup=input()
        else:
            print("A hit! {0} has {1}HP remaing\n{0} fainted, {2} wins!".format(opp.name,opp.hp, poke.charizard.name))
    else:
        print("Fire Blast has missed! {} still has {}HP".format(opp.name, opp.hp ))
        breakup=input()

def fire_spin(opp_string):      # captures raichu in a fire spin
    opp=eval("poke."+opp_string)
    print("{} used Fire Spin!".format(poke.charizard.name))
    n=randint(1,10)
    while n<=7+poke.charizard.acc:
        opp.hp=max(0,opp.hp-15)
        print("{0} is caught in a Fire Spin! {0} has {1}HP remaing".format(opp.name, opp.hp ))
        breakup=input()
        if opp.hp==0:
           print("{} fainted, {} wins!".format(opp.name, poke.charizard.name))
           break
        n=randint(1,10)
        
    if opp.hp>0:
        print("{} escaped the Fire Spin. It has {}HP remaining".format(opp.name, opp.hp ))
        breakup=input()

# raichu's attacks

def swift(opp_string):
    opp=eval("poke."+opp_string)
    print("{} used Swift!".format(poke.raichu.name))
    opp.hp=max(0,opp.hp-10)
    if opp.hp>0:
        print("A hit! {} has {}HP remaing".format(opp.name, opp.hp))
        breakup=input()
    else:
        print("A hit! {0} has {1}HP remaing\n{0} fainted, {2} wins!".format(opp.name,opp.hp, poke.raichu.name))


def thunderbolt(opp_string): 
    opp=eval("poke."+opp_string)
    print("{} used Thunderbolt!".format(poke.raichu.name))
    n=randint(1,10)
    if n<=7+poke.raichu.acc:
        opp.hp=max(0,opp.hp-30)
        if opp.hp>0:
            print("A hit! {} has {}HP remaing".format(opp.name, opp.hp ))
            breakup=input()
        else:
            print("A hit! {0} has {1}HP remaing\n{0} fainted, {2} wins!".format(opp.name,opp.hp, poke.raichu.name))
    else:
        print("Thunderbolt missed! {} still has {}HP".format(opp.name, opp.hp ))
        breakup=input()

def flash(opp_string):  # reduces opponents accuracy
    opp=eval("poke."+opp_string)
    print("{} used Flash!".format(poke.raichu.name))
    n=randint(1,10)
    if n<=8+poke.raichu.acc:
        opp.acc=max(-3,opp.acc-1)
        print("{} accuracy decreased".format(opp.name))
        breakup=input()
    else:
        print("Flash was uneffective")
        breakup=input()

#Alakazam's moves

def psychic(opp_string): 
    opp=eval("poke."+opp_string)
    print("{} used Psychic!".format(poke.alakazam.name))
    n=randint(1,10)
    if n<=6+poke.alakazam.acc:
        opp.hp=max(0,opp.hp-35)
        if opp.hp>0:
            print("A hit! {} has {}HP remaing".format(opp.name, opp.hp ))
            breakup=input()
        else:
            print("A hit! {0} has {1}HP remaing\n{0} fainted, {2} wins!".format(opp.name,opp.hp, poke.alakazam.name))
    else:
        print("Psychic missed! {} still has {}HP".format(opp.name, opp.hp ))
        breakup=input()

def psywave(opp_string):    # random damage between 5 and 50
    opp=eval("poke."+opp_string)
    print("{} used Psywave!".format(poke.alakazam.name))
    n=randint(1,10)
    if n<=7+poke.alakazam.acc:
        d=randint(1,10)
        opp.hp=max(0,opp.hp-5*d)
        if opp.hp>0:
            print("A hit! {} has {}HP remaing".format(opp.name, opp.hp ))
            breakup=input()
        else:
            print("A hit! {0} has {1}HP remaing\n{0} fainted, {2} wins!".format(opp.name,opp.hp, poke.alakazam.name))
    else:
        print("Psywave missed! {} still has {}HP".format(opp.name, opp.hp ))
        breakup=input()

def recover(opp_string):    # random hp recovered, between 15 and 55
    opp=eval("poke."+opp_string)
    print("{} used Recover!".format(poke.alakazam.name))
    n=randint(1,11)
    if n<=8:
        d=randint(3,10)
        poke.alakazam.hp=min(100,poke.alakazam.hp+5*d)
        print("Sucess! {0} has recoverd {2}HP. {0} now have {1}HP".format(poke.alakazam.name, poke.alakazam.hp, 5*d ))
        breakup=input()
    else:
        print("Recover failed! {} still has {}HP".format(poke.alakazam.name, poke.alakazam.hp ))
        breakup=input()


